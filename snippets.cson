# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.js':
  'add elm plugin for brunch':
    'prefix': 'secbrelm'
    'body': """

        elmBrunch: {
          elmFolder: "web/elm",
          mainModules: ["App.elm"],
          outputFolder: "../static/vendor"
        \\},
    """

  'add elm to wathcing directory':
    'prefix': 'secbrwelm'
    'body': '"web/elm",'

  'attach.ElmApp.to.container':
    'prefix': 'secattcnt'
    'body': """
    // Set up Elm App
    const elmDiv = document.querySelector("#elm-container");
    const elmApp = Elm.SecounterApp.embed(elmDiv);
    """

'.text.elixir':
  'create container for SEC application':
    'prefix': 'secappcnt'
    'body': '<div id="elm-container"></div>'

  'replace app.html.eex fie content':
    'prefix': 'secapphtml'
    'body': """
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="description" content="">
        <meta name="author" content="">

        <title>Hello SECounter!</title>
        <link rel="stylesheet" href="<%= static_path(@conn, "/css/app.css") %>">
        <style>
        .header {
          background-color: black;
        }
        .logo {
          margin: 2em;
          vertical-align: middle;
          background-image: url("https://github.com/webdizz/fun-web-dev/blob/master/epam-sec-fall-2016.png?raw=true");
        }
        </style>
      </head>

      <body>
        <div class="container">
          <header class="header" >
            <span class="logo"></span>
          </header>

          <p class="alert alert-info" role="alert"><%= get_flash(@conn, :info) %></p>
          <p class="alert alert-danger" role="alert"><%= get_flash(@conn, :error) %></p>

          <main role="main">
            <%= render @view_module, @view_template, assigns %>
          </main>

        </div> <!-- /container -->
        <script src="<%= static_path(@conn, "/js/app.js") %>"></script>
      </body>
    </html>

    """

'.source.elm':
  'import all required packages':
    'prefix': 'secelmapp'
    'body': """
    module SecounterApp exposing (..)

    import Html exposing (..)
    import Html.App as App
    import Html.Attributes exposing (..)
    import Html.Events exposing (..)
    import WebSocket
    import Json.Encode as Encode
    import Json.Decode exposing (..)
    import String


    main =
        App.beginnerProgram { model = 0, view = view, update = update }



    -- TYPES


    type MsgType
        = Increment
        | Decrement



    -- UPDATE


    update : MsgType -> number -> number
    update msg model =
        case msg of
            Increment ->
                model + 1

            Decrement ->
                model - 1



    -- VIEW


    view : a -> Html MsgType
    view model =
        div [ style [ ( "margin", "10px" ) ] ]
            [ button [ onClick Decrement ] [ text "-" ]
            , strong [ style [ ( "margin", "10px" ) ] ] [ text (toString model) ]
            , button [ onClick Increment ] [ text "+" ]
            , div [ style [ ( "font-weight", "bold" ), ( "padding-top", "10px" ) ] ] [ text "Debug:" ]
            ]

    """
  'define Phoenix channel mmsg type':
    'prefix': 'secelmappcnmsg'
    'body': """
    type alias ChannelMsg =
        { topic : String
        , event : String
        , payload : String
        , ref : String
        }
    """
  'define alias for Model':
    'prefix': 'secelmappmodel'
    'body': """
    type alias Model =
        { counter : Int
        , message : String
        }
    """
  'add new MsgType to handle messages from channel':
    'prefix': 'secelmappaddrcv'
    'body': """
    | Receive String
    """
  'align view function to mimic updates in model':
    'prefix': 'secelmappupview'
    'body': """
    view : Model -> Html MsgType
    view model =
        div [ style [ ( "padding", "10px" ) ] ]
            [ button [ onClick Decrement ] [ text "-" ]
            , strong [ style [ ( "padding", "10px" ) ] ] [ text (toString model.counter) ]
            , button [ onClick Increment ] [ text "+" ]
            , div [ style [ ( "font-weight", "bold" ), ( "padding", "10px" ) ] ] [ text "Debug:" ]
            , div [] [ text model.message ]
            ]
    """
  'add handling of new MsgType in update function':
    'prefix': 'secelmappaddrcvhdnl'
    'body': """
    Receive msgFromChannel ->
        case decodeString decodeChannelMsg msgFromChannel of
            Err msg ->
                ( Model counter (msg ++ msgFromChannel), Cmd.none )

            Ok value ->
                ( Model (Result.withDefault counter (String.toInt value.payload)) msgFromChannel, Cmd.none )

    """
  'update main function':
    'prefix': 'secelmappupmn'
    'body': """
    main =
        App.program
            { init = init Join
            , view = view
            , update = update
            , subscriptions = subscriptions
            }
    """
  'add init and subscriptions functional':
    'prefix': 'secelmappintsub'
    'body': """
    init : MsgType -> ( Model, Cmd MsgType )
    init action =
        (update action (Model 0 ""))


    subscriptions : Model -> Sub MsgType
    subscriptions model =
        WebSocket.listen sockerUrl Receive
    """
  'change update function to suppoer Join':
    'prefix': 'secelmappupjn'
    'body': """
    update : MsgType -> Model -> ( Model, Cmd MsgType )
    update msg { counter, message } =
        case msg of
            Join ->
                ( Model counter message
                , sendChannelMsg (ChannelMsg "counter:lobby" "phx_join" "rooms:lobby" "ui")
                )

            Increment ->
                ( Model counter message
                , sendChannelMsg (prepareChannelMsg "increment" counter)
                )

            Decrement ->
                ( Model counter message
                , sendChannelMsg (prepareChannelMsg "decrement" counter)
                )
    """

  'define Phoenix websocket connection URL':
    'prefix': 'secelmapputils'
    'body': """
    sendChannelMsg : ChannelMsg -> Cmd a
    sendChannelMsg msg =
        WebSocket.send sockerUrl (encodeChannelMsg msg)


    prepareChannelMsg : String -> Int -> ChannelMsg
    prepareChannelMsg action counter =
        ChannelMsg "counter:lobby" action (toString counter) action


    encodeChannelMsg : ChannelMsg -> String
    encodeChannelMsg msg =
        Encode.object
            [ ( "topic", Encode.string msg.topic )
            , ( "event", Encode.string msg.event )
            , ( "payload", Encode.object [ ( "body", Encode.string msg.payload ) ] )
            , ( "ref", Encode.string msg.ref )
            ]
            |> Encode.encode 0


    decodeChannelMsg : Decoder ChannelMsg
    decodeChannelMsg =
        object4 ChannelMsg
            ("topic" := string)
            ("event" := string)
            ("payload" := oneOf [ at [ "body" ] string, succeed "" ])
            (oneOf [ "ref" := string, succeed "" ])


    sockerUrl : String
    sockerUrl =
        "ws://localhost:4000/socket/websocket"
    """
  'add Join action type':
    'prefix': 'secelmappjntp'
    'body': """| Join"""


'.source.elixir':
  'register channel handler':
    'prefix': 'secexregcn'
    'body': 'channel "counter:*", Secounter.CounterChannel'
  'add increment/decrement handlers':
    'prefix': 'secexaddhndlrs'
    'body': """
    def handle_in("increment", payload, socket) do
      broadcast! socket, "increment", %{"body" => "\#{impose_payload(payload) + 1}"}
      {:noreply, socket}
    end

    def handle_in("decrement", payload, socket) do
      broadcast! socket, "decrement", %{"body" => "\#{impose_payload(payload) - 1}"}
      {:noreply, socket}
    end
    """
